<?php

/**
 * @file
 * Contains the supabase_authentication module hooks.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function supabase_authentication_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.supabase_authentication':
      return '<p>' . t('This module integrates Drupal with Supabase for user authentication.') . '</p>';
  }
}

/**
 * Implements hook_user_insert().
 */
function supabase_authentication_user_insert(User $user) {
  $supabase_service = \Drupal::service('supabase_authentication.supabase');
  $password_generator = \Drupal::service('password_generator');
  $email = $user->getEmail();

  // Generate a random password.
  $password = $password_generator->generate();

  // Create user in Supabase.
  $supabase_response = $supabase_service->createUser($email, $password);
  if (isset($supabase_response->id)) {
    \Drupal::logger('supabase_authentication')->notice('User @username created in Supabase.', ['@username' => $email]);
  }
  else {
    \Drupal::logger('supabase_authentication')->error('Failed to create user @username in Supabase: @error', [
      '@username' => $email,
      '@error' => print_r($supabase_response, TRUE),
    ]);
  }

  // Sign in the user to get the access token (optional).
  $supabase_auth = $supabase_service->signInUser($email, $password);
  if (isset($supabase_auth->access_token)) {
    \Drupal::logger('supabase_authentication')->notice('User @username authenticated with Supabase.', ['@username' => $email]);
  }
  else {
    \Drupal::logger('supabase_authentication')->error('Failed to authenticate user @username with Supabase: @error', [
      '@username' => $email,
      '@error' => print_r($supabase_auth, TRUE),
    ]);
  }
}

/**
 * Implements hook_install().
 */
function supabase_authentication_install() {
  // Set "Who can register accounts?" field to "Visitors" and Untick "Require email verification when a visitor creates an account".
  $config = \Drupal::configFactory()->getEditable('user.settings');
  $config->set('register', 'visitors')
    ->set('verify_mail', FALSE)
    ->save();

  // Load the form display configuration for the user entity.
  $form_display = EntityFormDisplay::load('user.user.default');

  // Check if form display is loaded successfully.
  if ($form_display) {
    $components = $form_display->getComponents();

    // Loop through components and disable all fields except "Username and password" (account).
    foreach ($components as $field_name => $component) {
      if ($field_name !== 'account') {
        $form_display->removeComponent($field_name);
      }
    }

    // Save the updated form display configuration.
    $form_display->save();
  }
}
